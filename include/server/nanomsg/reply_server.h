/*!
    \file reply_server.h
    \brief Nanomsg reply server definition
    \author Ivan Shynkarenka
    \date 02.02.2017
    \copyright MIT License
*/

#ifndef CPPSERVER_NANOMSG_REPLY_SERVER_H
#define CPPSERVER_NANOMSG_REPLY_SERVER_H

#include "server.h"

namespace CppServer {
namespace Nanomsg {

//! Nanomsg reply server
/*!
    Nanomsg reply server is used to receive requests from Nanomsg clients
    and reply with corresponding responses.

    This protocol is used to distribute the workload among multiple stateless
    workers.

    Please note that request/reply applications should be stateless.

    It's important to include all the information necessary to process the
    request in the request itself, including information about the sender or
    the originator of the request if this is necessary to respond to the request.

    Sender information cannot be retrieved from the underlying socket connection
    since, firstly, transports like IPC may not have a firm notion of a message
    origin. Secondly, transports that have some notion may not have a reliable one
    - a TCP disconnect may mean a new sender, or it may mean a temporary loss in
    network connectivity.

    For this reason, sender information must be included by the application if
    required. Allocating 6 randomly-generated bytes in the message for the lifetime
    of the connection is sufficient for most purposes. For longer-lived
    applications, an UUID is more suitable.

    Thread-safe.
*/
class ReplyServer : public Server
{
public:
    //! Initialize server with a given endpoint address
    /*!
        \param address - Endpoint address
        \param threading - Run server in a separate thread (default is true)
    */
    explicit ReplyServer(const std::string& address, bool threading = true)
        : Server(CppServer::Nanomsg::Domain::Std, CppServer::Nanomsg::Protocol::Reply, address, threading)
    {}
    ReplyServer(const ReplyServer&) = delete;
    ReplyServer(ReplyServer&&) = default;
    virtual ~ReplyServer() = default;

    ReplyServer& operator=(const ReplyServer&) = delete;
    ReplyServer& operator=(ReplyServer&&) = default;
};

/*! \example nanomsg_reply_server.cpp Nanomsg reply server example */

} // namespace Nanomsg
} // namespace CppServer

#endif // CPPSERVER_NANOMSG_REPLY_SERVER_H
